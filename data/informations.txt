* ESTRUTURA DE DADOS

Conhecimentos prévios
- Introdução a programação Web e conceitos básicos 
- Bloco de notas
- Editor de texto
- Navegador ou Node JS (execução do código)

Por que estudar estrutura de dados?
- Organizar os dados da aplicação 
- Entender estruturas para melhor tomada de decisão 
- Escrever melhores algoritmos
- Eficiência
- Empresas usam como requisito

O que é estrutura de dados?
- Uma maneira de organizar e ordenar informações e registra-los na memória do computador como:
- texto 
- números
- booleanos

* Organizar dados (informações)
* Textos, números, booleanos.
* Como estão registrados na memória

# Arrays
Arrays, vetor ou arranjo é uma estrutura amplamente utilizada e implementada em quase todas as 
linguagens de programação

Uma das estruturas mais básicas e simples de criar e utilizar 
['a', 10, 'id', true] // total de 4 elementos

# Caracteristicas
- Acesso pelo Index
- Respeita a ordem de inserção dos elementos
- Aceita valores duplicados 
- Dependendo do tamanho do array, para encontrar e/ou deletar um elemento, será necessário um uso maior de performance.
# Arrays no JavaScript
- São dinâmicos 
- Você poderá ter dados de diferentes tipos misturados dentro de um array, strings, numbers, booleans, objetos, funções, e até outros arrays.
- Existem muitos métodos já implementados 
- push(), pop(), find(), filter() entre outros.

# Matriz
Matriz ou vetor multidimensional.

Significa que é um array dentro de outro array.
Poderemos ter muitos níveis. 

const students = [['Joseph', 23, 'MG'] ['Briana', 22, 'SP'], ['Priscila', 23, 'PR']]
console.log(students[0][1])

#Stack
A tradução de stack é pilha
Como uma pilha de livro.

* Linear, um após o outro.
* O último a entrar na pilha é o primeiro a sair.

Conceitos
- LIFO: Last In First Out
O ultimo elemento a entrar na pilha, aquele elemento do topo da pilha, é o primeiro a sair.

# Stack no código
- Métodos fundamentais
Push() Adicionar um elemento a pilha
Pop() Remover o elemento do topo da pilha
Peek() Obter o elemento do topo da pilha

Outros métodos poderão ser implementados com o Size() para mostrar o tamanho da pilha.

# Queue
FIFO: Fisrt In First Out
- O primeiro a entrar na fila é o primeiro a sair dela.
- Front (frente) é a referência do primeiro elemento a entrar na fila
- Back (fundo) é a referência de último elemento a entrar na fila 
(Enqueue) significa que está entrando na fila 
(Dequeue) significa que está saindo da fila

# Queue no código

Métodos fundamentais
Enqueue(): Adicionar um elemento ao final da fila
Dequeue(): Remover o primeiro elemento a entrar na fila

Outros métodos poderão ser implementados como size() para mostrar o tamanho da fila ou front()
para pegar o primeiro da fila, dentre tantos outros.

* Visão geral
- Usamos ED para gerenciar os dados, as informações da nossa aplicação
- Organizar, ordenar, buscar, são algumas funcionalidades básicas.
- Melhorar a escrita de algoritmos.
- Melhorar a eficiência dos nossos aplicativos.
- Existem muitas estruturas a serem estudadas.

Estrutura de dados poderá ser um assunto um pouco desafiador, especialmente para quem está no começo
da jornada. Mas como qualquer outra habilidade, com o passar do tempo e prática diária, através de desafios
da carreira, poderemos entender cada vez melhor.